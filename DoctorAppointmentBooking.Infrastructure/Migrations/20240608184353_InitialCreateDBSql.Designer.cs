// <auto-generated />
using System;
using DoctorAppointmentBooking.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorAppointmentBooking.Infrastructure.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20240608184353_InitialCreateDBSql")]
    partial class InitialCreateDBSql
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorAppointmentBooking.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Code");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Doctor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "123",
                            IsDeleted = false,
                            Name = "Christiano Coccuza"
                        },
                        new
                        {
                            Id = 2,
                            Code = "456",
                            IsDeleted = false,
                            Name = "Ida Fortini"
                        },
                        new
                        {
                            Id = 3,
                            Code = "789",
                            IsDeleted = false,
                            Name = "Bárbara Martins"
                        },
                        new
                        {
                            Id = 4,
                            Code = "001",
                            IsDeleted = false,
                            Name = "Ronu Muole"
                        },
                        new
                        {
                            Id = 5,
                            Code = "002",
                            IsDeleted = false,
                            Name = "Mayfe Puesl"
                        },
                        new
                        {
                            Id = 6,
                            Code = "003",
                            IsDeleted = true,
                            Name = "Deko Gapuobri"
                        });
                });

            modelBuilder.Entity("DoctorAppointmentBooking.Domain.Entities.DoctorSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialty", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            IsDeleted = false,
                            SpecialtyId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 2,
                            IsDeleted = false,
                            SpecialtyId = 2
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 3,
                            IsDeleted = false,
                            SpecialtyId = 3
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 4,
                            IsDeleted = false,
                            SpecialtyId = 4
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 5,
                            IsDeleted = false,
                            SpecialtyId = 5
                        });
                });

            modelBuilder.Entity("DoctorAppointmentBooking.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Patient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "r@rrr.com.br",
                            IsDeleted = false,
                            Name = "Rodrigo Carvalhomaru"
                        },
                        new
                        {
                            Id = 2,
                            Email = "shutzing@enzo.com.br",
                            IsDeleted = false,
                            Name = "Enzo Shutzing"
                        },
                        new
                        {
                            Id = 3,
                            Email = "cleber@bluedragon.com.br",
                            IsDeleted = false,
                            Name = "Cléber Bluedragon"
                        },
                        new
                        {
                            Id = 4,
                            Email = "neville@bernard.com.br",
                            IsDeleted = false,
                            Name = "Neville Bernard"
                        },
                        new
                        {
                            Id = 5,
                            Email = "wendell@kessner.com.br",
                            IsDeleted = false,
                            Name = "Wendell Kessner"
                        },
                        new
                        {
                            Id = 6,
                            Email = "adare@gerbitz.com.br",
                            IsDeleted = false,
                            Name = "Adare Gerbitz"
                        },
                        new
                        {
                            Id = 7,
                            Email = "sanders@cameron.com.br",
                            IsDeleted = false,
                            Name = "Sanders Cameron"
                        },
                        new
                        {
                            Id = 8,
                            Email = "agata@wanner.com.br",
                            IsDeleted = false,
                            Name = "Agata Wanner"
                        },
                        new
                        {
                            Id = 9,
                            Email = "senalda@ramirez.com.br",
                            IsDeleted = false,
                            Name = "Senalda Ramírez"
                        });
                });

            modelBuilder.Entity("DoctorAppointmentBooking.Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTimeSchedule")
                        .HasColumnType("datetime")
                        .HasColumnName("DateTimeSchedule");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Schedule", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimeSchedule = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 1,
                            IsDeleted = false,
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateTimeSchedule = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 2,
                            IsDeleted = false,
                            PatientId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateTimeSchedule = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateTimeSchedule = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 2,
                            IsDeleted = false,
                            PatientId = 2
                        },
                        new
                        {
                            Id = 5,
                            DateTimeSchedule = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 3
                        },
                        new
                        {
                            Id = 6,
                            DateTimeSchedule = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            DoctorId = 1,
                            IsDeleted = false,
                            PatientId = 1
                        });
                });

            modelBuilder.Entity("DoctorAppointmentBooking.Domain.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("Specialty", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Nefrologista",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            Description = "Neurologista",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            Description = "Nutricionista",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            Description = "Gastro",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            Description = "Oftalmologista",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            Description = "Oncologista",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            Description = "Clinico Geral",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DoctorAppointmentBooking.Domain.Entities.DoctorSpecialty", b =>
                {
                    b.HasOne("DoctorAppointmentBooking.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointmentBooking.Domain.Entities.Specialty", "Specialty")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("DoctorAppointmentBooking.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("DoctorAppointmentBooking.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointmentBooking.Domain.Entities.Patient", "Patient")
                        .WithMany("Schedules")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorAppointmentBooking.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("DoctorSpecialties");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DoctorAppointmentBooking.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DoctorAppointmentBooking.Domain.Entities.Specialty", b =>
                {
                    b.Navigation("DoctorSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
