@page "/doctorschedule"
@attribute [Authorize(Roles = "Doctor, Admin, Patient")]
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage

<PageTitle>My Schedule</PageTitle>
@if (_schedules == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudTable Items="_schedules" Hover="true" Bordered="true" Striped="true" Breakpoint="Breakpoint.Sm">
        <ToolBarContent>
            <MudText Typo="Typo.h6">My Schedule</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Doctor</MudTh>
            <MudTh>Patient</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Deleted</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Doctor">
                <MudTextField T="string" @bind-Value="context.Doctor.Name" ReadOnly="true" Variant="Variant.Outlined" Disabled="true"/>
            </MudTd>
            <MudTd DataLabel="Patient">
                <MudTextField T="string" @bind-Value="context.Patient.Name" ReadOnly="true" Variant="Variant.Outlined" Disabled="true"/>
            </MudTd>
            <MudTd DataLabel="Date">
                <MudTextField T="string" Value="@context.DateTimeSchedule.ToString("dd-MM-yyyy HH:mm")" ReadOnly="true" Variant="Variant.Outlined" Disabled="true"/>
            </MudTd>
            <MudTd DataLabel="Deleted">
                <MudSwitch @bind-Checked="context.IsDeleted" Color="Color.Error" Disabled="true"/>
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => Edit(context)">EDIT</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => Delete(context.Id)">CANCEL</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@if (isEditFormVisible)
{
    <hr>
    <MudCardContent>
        <div class="mb-3" style="display:none;">
            <MudTextField T="int" Label="Id" @bind-Value="_schedule.Id" Variant="Variant.Outlined" Disabled="true"/>
        </div>
        <div class="mb-3" style="display:none;">
            <MudTextField T="int" Label="Patient Id" @bind-Value="_schedule.PatientId" Variant="Variant.Outlined" Disabled="true"/>
        </div>
        <div class="mb-3">
            <MudDatePicker Label="Date" @bind-Date="ScheduleDate" Variant="Variant.Outlined"/>
            <MudTimePicker Label="Time" @bind-Time="ScheduleTime" Variant="Variant.Outlined"/>
        </div>
        <div class="mb-3">
            <MudSwitch @bind-Checked="_schedule.IsDeleted" Color="Color.Error" Label="Is Deleted"/>
        </div>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddOrUpdate">SAVE</MudButton>
    </MudCardContent>
}

@code {
    private IList<DoctorAppointmentBooking.Domain.Entities.Schedule>? _schedules;
    private ScheduleDto _schedule = new ScheduleDto { DateTimeSchedule = DateTime.Now }; // Ensure DateTimeSchedule is initialized
    private IList<DoctorAppointmentBooking.Domain.Entities.Doctor>? _doctors;
    private bool isEditFormVisible = false;

    [Inject] private IRestClient RestClient { get; set; } = default!;
    [Inject] private BaseUrlConfiguration BaseUrlConfig { get; set; } = default!;
    RestRequest request;
    RestResponse<ResultViewModel<DoctorAppointmentBooking.Domain.Entities.Schedule>> response;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadSchedule();
    }

    private async Task LoadSchedule()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            var request = new RestRequest($"{BaseUrlConfig.ApiBase}/v1/Schedule/GetDoctorSchedule/{userId}");
            var token = await GetToken();
            request.AddHeader("Authorization", $"Bearer {token}");

            var response = await RestClient.ExecuteAsync<ResultViewModel<IList<DoctorAppointmentBooking.Domain.Entities.Schedule>>>(request);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                _schedules = response?.Data?.Data;
                if (_schedules != null && _schedules.Any())
                {
                    _schedule = new ScheduleDto
                    {
                        Id = _schedules.First().Id,
                        DoctorId = _schedules.First().DoctorId,
                        PatientId = _schedules.First().PatientId,
                        DateTimeSchedule = _schedules.First().DateTimeSchedule,
                        IsDeleted = _schedules.First().IsDeleted
                    };
                }
            }
            else
            {
                if (response.Data?.Errors != null && response.Data.Errors.Any())
                {
                    foreach (var error in response.Data?.Errors)
                    {
                        Snackbar.Add(error, Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add($"Error loading schedules: {response.StatusDescription}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Exception loading schedules: " + ex.Message, Severity.Error);
        }
    }

    private async Task<string?> GetToken()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _schedule.PatientUserId = "vazio";
        _schedule.DoctorUserId =  user.Claims.FirstOrDefault(e => e.Type == ClaimTypes.NameIdentifier).Value;
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        return token;
    }

    private async Task Delete(int id)
    {
        try
        {
            var request = new RestRequest($"{BaseUrlConfig.ApiBase}/v1/Schedule/{id}", Method.Delete);
            var token = await GetToken();
            request.AddHeader("Authorization", $"Bearer {token}");
            var response = await RestClient.ExecuteAsync<ResultViewModel<DoctorAppointmentBooking.Domain.Entities.Schedule>>(request);

            if (response.StatusCode == HttpStatusCode.OK)
            {
                Snackbar.Add("Schedule canceled successfully", Severity.Success);
                await LoadSchedule();
            }
            else
            {
                if (response.Data?.Errors != null && response.Data.Errors.Any())
                {
                    foreach (var error in response.Data?.Errors)
                    {
                        Snackbar.Add(error, Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add($"Error deleting schedule: {response.StatusDescription}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Exception deleting schedule: " + ex.Message, Severity.Error);
        }
    }

    private async Task Edit(DoctorAppointmentBooking.Domain.Entities.Schedule schedule)
    {
        _schedule.Id = schedule.Id;
        _schedule.DoctorId = schedule.DoctorId;
        _schedule.PatientId = schedule.PatientId;
        _schedule.DateTimeSchedule = schedule.DateTimeSchedule;
        _schedule.IsDeleted = schedule.IsDeleted;
        isEditFormVisible = true;
    }

    private async Task AddOrUpdate()
    {
        try
        {
            if (_schedule?.Id == 0)
            {
                request = new RestRequest($"{BaseUrlConfig.ApiBase}/v1/Schedule/", Method.Post);
            }
            else
            {
                request = new RestRequest($"{BaseUrlConfig.ApiBase}/v1/Schedule/{_schedule.Id}", Method.Put);
            }
            
            request.AddJsonBody(_schedule);
            var token = await GetToken();
            request.AddHeader("Authorization", $"Bearer {token}");
            response = await RestClient.ExecuteAsync<ResultViewModel<DoctorAppointmentBooking.Domain.Entities.Schedule>>(request);

            if (response.StatusCode == HttpStatusCode.OK)
            {
                Snackbar.Add("Schedule saved successfully", Severity.Success);
                await LoadSchedule();
                _schedule = new ScheduleDto { DateTimeSchedule = DateTime.Now };
                isEditFormVisible = false; 
            }
            else
            {
                if (response.Data?.Errors != null && response.Data.Errors.Any())
                {
                    foreach (var error in response.Data?.Errors)
                    {
                        Snackbar.Add(error, Severity.Warning);
                    }
                }
                else
                {
                    Snackbar.Add($"Error saving Schedule: {response.StatusDescription}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Exception saving Schedule: " + ex.Message, Severity.Error);
        }
    }

    private DateTime? ScheduleDate
    {
        get => _schedule?.DateTimeSchedule.Value.Date ?? DateTime.Now;
        set
        {
            if (_schedule != null)
                _schedule.DateTimeSchedule = value + _schedule.DateTimeSchedule.Value.TimeOfDay;
        }
    }

    private TimeSpan? ScheduleTime
    {
        get => _schedule?.DateTimeSchedule.Value.TimeOfDay ?? TimeSpan.Zero;
        set
        {
            if (_schedule != null)
                _schedule.DateTimeSchedule = _schedule.DateTimeSchedule.Value.Date + value;
        }
    }
}