@page "/patient"
@attribute [Authorize(Roles = "Doctor, Admin")]
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage

<PageTitle>Patient</PageTitle>

<h3>Patient Management</h3>

@if (_patients == null || _patients.Count == 0)
{
    <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Loading...</MudText>
}
else
{
    <MudTable Items="_patients" Striped="true" Hover="true" Bordered="true">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Deleted</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">
                <MudTextField T="string" @bind-Value="context.Name" Variant="Variant.Outlined" />
            </MudTd>
            <MudTd DataLabel="Email">
                <MudTextField T="string" @bind-Value="context.Email" Variant="Variant.Outlined" />
            </MudTd>
            <MudTd DataLabel="Deleted">
                <MudSwitch @bind-Checked="context.IsDeleted" Color="Color.Error" />
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => EditPatient(context)">EDIT</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeletePatient(context.Id)">DELETE</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

<MudDivider Class="my-4" />

<MudPaper Elevation="4" Class="pa-4">
    <MudTextField T="string" Label="Name" @bind-Value="_patient.Name" Variant="Variant.Outlined" Class="mb-3" />
    <MudTextField T="string" Label="Email" @bind-Value="_patient.Email" Variant="Variant.Outlined" Class="mb-3" />
    <MudSwitch @bind-Checked="_patient.IsDeleted" Color="Color.Error" Label="Is Deleted" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddOrUpdate" Class="mt-3">Save</MudButton>
</MudPaper>

@code {
    private IList<DoctorAppointmentBooking.Domain.Entities.Patient>? _patients;
    private DoctorAppointmentBooking.Domain.Entities.Patient _patient = new();
    [Inject] private IRestClient RestClient { get; set; } = default!;
    [Inject] private BaseUrlConfiguration BaseUrlConfig { get; set; } = default!;
    RestRequest request;
    RestResponse<ResultViewModel<DoctorAppointmentBooking.Domain.Entities.Patient>> response;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPatient();
    }
    
    private async Task LoadPatient()
    {
        try
        {
            var request = new RestRequest($"{BaseUrlConfig.ApiBase}/v1/Patient/GetAllPatient");
            var token = await GetToken();
            request.AddHeader("Authorization", $"Bearer {token}");
            
            var response = await RestClient.ExecuteAsync<ResultViewModel<IList<DoctorAppointmentBooking.Domain.Entities.Patient>>>(request);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                _patients = response?.Data?.Data;
            }
            else
            {
                if (response.Data?.Errors != null && response.Data.Errors.Any())
                {
                    foreach (var error in response.Data?.Errors)
                    {
                        Snackbar.Add(error, Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add($"Erro ao processar os Patients: {response.StatusDescription}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Exception updating profile: " + ex.Message, Severity.Error);
        }
    }

    private async Task<string?> GetToken()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        return token;
    }

    private async Task AddOrUpdate()
    {
        try
        {
            if (_patient?.Id == 0)
            {
                request = new RestRequest($"{BaseUrlConfig.ApiBase}/v1/Patient/", Method.Post);
            }
            else
            {
                request = new RestRequest($"{BaseUrlConfig.ApiBase}/v1/Patient/{_patient.Id}", Method.Put);
            }
            
            request.AddJsonBody(_patient);
            var token = await GetToken();
            request.AddHeader("Authorization", $"Bearer {token}");
            response = await RestClient.ExecuteAsync<ResultViewModel<DoctorAppointmentBooking.Domain.Entities.Patient>>(request);

            if (response.StatusCode == HttpStatusCode.OK)
            {
                Snackbar.Add("Specialty saved successfully", Severity.Success);
                await LoadPatient();
                _patient = new DoctorAppointmentBooking.Domain.Entities.Patient();
            }
            else
            {
                if (response.Data?.Errors != null && response.Data.Errors.Any())
                {
                    foreach (var error in response.Data?.Errors)
                    {
                        Snackbar.Add(error, Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add($"Error saving Patient: {response.StatusDescription}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Exception saving Patient: " + ex.Message, Severity.Error);
        }
    }
    
    private async Task EditPatient(DoctorAppointmentBooking.Domain.Entities.Patient patient)
    {
        _patient = patient;
    }

    private async Task DeletePatient(int id)
    {
        try
        {
            var request = new RestRequest($"{BaseUrlConfig.ApiBase}/v1/Patient/{id}", Method.Delete);
            var token = await GetToken();
            request.AddHeader("Authorization", $"Bearer {token}");
            var response = await RestClient.ExecuteAsync<ResultViewModel<DoctorAppointmentBooking.Domain.Entities.Patient>>(request);

            if (response.StatusCode == HttpStatusCode.OK)
            {
                Snackbar.Add("Patient deleted successfully", Severity.Success);
                await LoadPatient();
            }
            else
            {
                if (response.Data?.Errors != null && response.Data.Errors.Any())
                {
                    foreach (var error in response.Data?.Errors)
                    {
                        Snackbar.Add(error, Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add($"Error deleting Patient: {response.StatusDescription}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Exception deleting Patient: " + ex.Message, Severity.Error);
        }
    }
}